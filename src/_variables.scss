$background-colour: white;
$background-colour-light: #e7e7e7;
$background-colour-lighter: #656262;
$background-colour-dark: black;

$text-colour: black;
$text-colour-highlight: grey;
$text-colour-focused: black;

$font-size: 1em;
$font-family: 'Karla', sans-serif;

$primary-background-colour: #19181e;
$primary-background-colour-light: #4d4848;
$primary-background-colour-lighter: #656262;
$primary-background-colour-dark: navy;

$primary-text-colour: #fcf0b4;
$primary-text-colour-highlight: #f9e067;
$primary-text-colour-focused: orange;

$primary-background-color: #e9e3e3;
$primary-font-family: 'Karla', sans-serif;
$font-size-large: 1.2em;
$font-sise-normal: 1em;
$font-size-small: 0.8em;

$padding: 9px;

/* Grid */
$grid-breakpoints: (
    'xs': 0,
    'sm': 640px,
    'md': 960px,
    'lg': 1180px,
    'xl': 1500px,
) !default;
$grid-widths: (
    'sm': 600px,
    'md': 920px,
    'lg': 1140px,
    'xl': 1460px,
) !default;

/* Building a product to be responsive and mobile first requires a strong media query game.
 *
 * For a long time we would use media queries to target the breakpoints of certain devices, such as mobile, tablet, and desktop.
 * But there are now so many devices and strange widths out there that the idea of creating media queries to fit these pre-defined
 * values is near obsolete.
 *
 * We do have some pre-defined device sizes in our variables file that can be used quickly and cover a lot of general use cases,
 * but it is recommended that you use custom breakpoint values where the content requires it.
 *
 * The following mixins mean we can use media queries quickly and effectively. All have been built accept either a map key
 * ('xs', 'sm', 'md', 'lg', 'xl') or a custom pixel/em/rem value.
 */

/* Iterate forward to the next value in our $grid-breakpoints map. Helps with the following breakpoint functions and mixins. */
@function break-next($size, $map: $grid-breakpoints, $keys: map-keys($map)) {
    $i: index($keys, $size);
    @return if($i < length($keys), nth($keys, $i + 1), null);
}

/* Checks and outputs null if we're at the first value in our $grid-breakpoints map. */
@function break-min($size, $map: $grid-breakpoints) {
    $min: map-get($map, $size);
    @return if($min != 0, $min, null);
}

/* Uses the break-next function to get the value of the next breakpoint and then set our max just below that. We use -0.02px to get around Safari's weird rounding. */
@function break-max($size, $map: $grid-breakpoints) {
    $next: break-next($size, $map);
    @return if($next, break-min($next, $map) - 0.02px, null);
}

/* Basic media query that only outputs min-width.
 * Can accept a map key ('xs', 'sm', 'md', 'lg', 'xl') or a custom pixel/em/rem value.
 *
 * Example: Content is visible on large devices and up - @include media('lg') { display: block; }
 * ...or... Content is visible on devices larger than 666px - @include media(666px) { display: block; }
 */
@mixin media($size, $map: $grid-breakpoints) {
    $min: if(
        break-min($size, $map),
        if(map-has-key($map, $size), break-min($size, $map), $size),
        null
    );
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}

/* Basic max-width only media query.
 * Can accept a map key ('xs', 'sm', 'md', 'lg', 'xl') or a custom pixel/em/rem value.
 *
 * Example: Text is larger on devices up to desktop - @include media-down('lg') { font-size: $font-size * 1.5; }
 * ...or... Text is larger on devices up to 666px - @include media-down(666px) { font-size: $font-size * 1.5; }
 */
@mixin media-down($size, $map: $grid-breakpoints) {
    $max: if(
        break-max($size, $map),
        if(map-has-key($map, $size), break-max($size, $map), $size),
        null
    );
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    } @else {
        @content;
    }
}